字符串
======================================
字符串也是一种数据类型，比如 ``"abc"`` 、 ``"~!@#$"`` 、 ``"我是好人"`` 等用来表示人类语言，在编程过程中我们会经常和字符串打交道，python提供了很多处理字符串的方法，如 ``replace`` 、 ``find`` 、 ``lower`` 等等，后面会一一介绍

编码
---------------------------------------
在介绍字符串之前，我们先来了解一下编码，大家都知道在计算机中数据都是以二进制保存的，也就是 ``01101111001010`` 这样子，那我们如何保存字符串呢？因为最开始计算机在美国比较流行，美国讲英语，也就26个字母，算上大小写再加上数字标点符号也不够127个，所以美国人把他们用到的字符集用一个字节就可以完全表示了，如B可以用66表示，即 ``01000010``，美国人把这种编码规则叫做 ``ASCII`` 码。

.. note:: 在计算机中一位二进制叫做一位，即1 bit，8位叫一个字节

再后来呢，计算机开始在全世界流行了，但是其它国家并不全使用英文字母语言，比如欧洲很多国家（如德国、法国、瑞典、俄罗斯、波兰等）的字母就和英文字母不一样，其它国家就更不用说了，中国就有几万个汉字，日本也有一万多汉字还有平假名、片假名，所以这些国家也开始制定自己国家语言的字符集，如中国的字符集 ``gbk`` 即 ``GB2312`` 、 ``gbk`` 编码是兼容 ``ASCII`` 编码的，但是因为汉字太多了，所以使用了两个字节表示，两个字节16位，也就是最多可以表示65536个字符，足够用了。同时其它国家也制定了类似 ``gbk`` 这样的字符集，好吧，这下子乱了套了，比如在中国字符集中用 ``0b1100111011010010`` 来表示 ``我`` ，但翻译成日文字符集（Shift_JIS）却就成了 ``ﾎﾒ`` ，假如一个字符串中同时包括中文和日文，这叫计算机怎么解码呢？按中文编码解是错的，按日文也是错的，好纠结。。。 ::

    In [54]: wo = u'我'

    In [55]: wo_gbk = wo.encode('gbk')

    In [56]: wo_gbk
    Out[56]: '\xce\xd2'

    In [57]: print(wo_gbk.decode('Shift_JIS'))
    ﾎﾒ

    In [58]:

于是乎，编码这个问题成了计算机的一个大问题，为了解决这个问题，ISO制定了一个宏大的计算，把全世界的字符都包含进来，全名为 ``unicode`` 也叫 ``统一码`` 、``万国码`` ，unicode一般占用2个字节，下面我们显示一下在python里定义unicode字符 ::

    In [1]: ustr = u"我是好人"

    In [2]: ustr
    Out[2]: u'\u6211\u662f\u597d\u4eba'

    In [3]: ustr2 = u'\u6211\u662f\u597d\u4eba'

    In [4]: ustr2
    Out[4]: u'\u6211\u662f\u597d\u4eba'

    In [5]: print(ustr2)
    我是好人

好，现在世界的字符编码统一了，但又有问题了，欧美那些国家因为是使用字母，以前1个字节就搞定了，现在为了照顾其他国家，竟然要多用1个字节，这要浪费多少硬盘、内存和网络带宽啊，不公平，抵制~！！！于是乎，又出现了 ``UTF-8`` 编码，这个字符集的特点是兼容 ``ASCII`` ，即 ``ASCII`` 是它的一个字集，它把原先的 ``ASCII`` 字符仍编码为1个字节，另外一些常用的其它国家字符编码为2个字节，一些生僻字编码为3-6个字节，于是即照了欧美众国的程序员情绪、兼容了之前用ASCII编码的代码，还节省了存储空间，节约了传输带宽，具体的编码格式如下所示:

.. list-table::
  :widths: 15 20
  :header-rows: 1

  * - Unicode编码(十六进制)
    - UTF-8 字节流(二进制)
  * - 000000-00007F
    - 0xxxxxxx
  * - 000080-0007FF
    - 110xxxxx 10xxxxxx
  * - 000800-00FFFF
    - 1110xxxx 10xxxxxx 10xxxxxx
  * - 010000-10FFFF
    - 11110xxx10xxxxxx10xxxxxx10xxxxxx

也就是说UTF-8编码的字符没有固定长度，是变长的，来我们看一下unicode和utf-8的转换::

    In [11]: unicode_str = u"我"

    In [12]: utf8_str = unicode_str.encode('utf-8') #  使用encode(翻译成中文是编码)方法、utf-8来编码unicode字符

    In [13]: utf8_str
    Out[13]: '\xe6\x88\x91'

    In [14]: utf8_str.decode('utf-8') #  使用decode(翻译成中文是解)方法、utf-8来解码unicode字符
    Out[14]: u'\u6211'

    In [15]:

大家试一下，体会一下，讲到这里，大家是不是有点感觉了？其它unicode和utf-8还有很多非常细的知识点，不过我们掌握这些基础的一般就够用了，下面我们来试一下unicode和其它编码的转换::

    In [6]: unicode_wo = u"我"

    In [7]: gbk_wo = unicode_wo.encode('gbk')

    In [8]: gbk_wo
    Out[8]: '\xce\xd2'

    In [9]: Shift_JIS_wo = unicode_wo.encode('Shift_JIS')

    In [10]: Shift_JIS_wo
    Out[10]: '\x89\xe4'

好了，介绍到这里，我们不但学习了字符串编码知识，同时还学会了字符串的两个方法 ``encode`` & ``decode``
